const Database = require('better-sqlite3');
const db = new Database('db/agent.db');

const cmd = process.argv[2] || 'recent';

if (cmd === 'recent') {
  const rows = db.prepare(`
    SELECT mint, symbol, name, source, first_seen_at
    FROM tokens
    ORDER BY first_seen_at DESC
    LIMIT 20
  `).all();
  console.table(rows);
} else if (cmd === 'events') {
  const mint = process.argv[3]; 
  if (!mint) { 
    console.log('Usage: node cli.js events <MINT>'); 
    process.exit(1); 
  }
  const evts = db.prepare(`
    SELECT type, source, received_at, signature
    FROM token_events WHERE mint = ? ORDER BY received_at DESC LIMIT 50
  `).all(mint);
  console.table(evts);
} else if (cmd === 'stats') {
  const stats = db.prepare(`
    SELECT 
      source,
      type,
      COUNT(*) as count,
      COUNT(DISTINCT mint) as unique_mints,
      COUNT(DISTINCT signature) as unique_signatures
    FROM token_events 
    GROUP BY source, type
    ORDER BY count DESC
  `).all();
  console.log('üìä Event Statistics:');
  console.table(stats);
  
  const totalEvents = db.prepare('SELECT COUNT(*) as total FROM token_events').get();
  const totalTokens = db.prepare('SELECT COUNT(*) as total FROM tokens').get();
  
  console.log(`\nüìà Summary:`);
  console.log(`   Total Events: ${totalEvents.total}`);
  console.log(`   Total Tokens: ${totalTokens.total}`);
} else if (cmd === 'duplicates') {
  const duplicates = db.prepare(`
    SELECT 
      mint, 
      type, 
      signature,
      COUNT(*) as count,
      GROUP_CONCAT(received_at) as timestamps
    FROM token_events 
    GROUP BY mint, type, received_at
    HAVING COUNT(*) > 1
    ORDER BY count DESC
    LIMIT 20
  `).all();
  
  if (duplicates.length === 0) {
    console.log('‚úÖ No duplicate events found!');
  } else {
    console.log('‚ö†Ô∏è  Duplicate events found:');
    console.table(duplicates);
  }
} else {
  console.log('Commands:');
  console.log('  recent     - Show recent tokens');
  console.log('  events <MINT> - Show events for specific mint');
  console.log('  stats      - Show event statistics');
  console.log('  duplicates - Show duplicate events');
}

} else if (cmd === 'recent-pump') {
  const rows = db.prepare(`
    SELECT mint, symbol, name, source, first_seen_at
    FROM tokens
    WHERE source = 'pump.fun'
    ORDER BY first_seen_at DESC
    LIMIT 20
  `).all();
  
  if (rows.length === 0) {
    console.log('üîç No pump.fun tokens found yet. Make sure the WebSocket client is running!');
  } else {
    console.log('üéâ Recent Pump.fun Tokens:');
    console.table(rows);
  }
} else {
  console.log('Commands:');
  console.log('  recent     - Show recent tokens');
  console.log('  events <MINT> - Show events for specific mint');
  console.log('  stats      - Show event statistics');
  console.log('  duplicates - Show duplicate events');
  console.log('  recent-pump - Show recent pump.fun tokens');
}
